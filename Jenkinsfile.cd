pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    timestamps()
    ansiColor('xterm')
  }

  environment {
    RG = 'rg-petclinic'
    AKS = 'aks-petclinic'
    ACR_NAME = 'petclinicacr9999'
    ACR_LOGIN_SERVER = 'petclinicacr9999.azurecr.io'
    IMAGE_NAME = 'petclinic'
    NAMESPACE = 'petclinic'
  }

  parameters {
    string(name: 'IMAGE_TAG', defaultValue: 'latest', description: 'Tag to deploy (from CI output).')
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Azure Login & KubeConfig') {
      steps {
        withCredentials([string(credentialsId: 'azure-sp-jenkins', variable: 'AZURE_CREDENTIALS_JSON')]]) {
          sh """
            echo "$AZURE_CREDENTIALS_JSON" > azure.json
            CLIENT_ID=$(jq -r .clientId azure.json)
            CLIENT_SECRET=$(jq -r .clientSecret azure.json)
            TENANT_ID=$(jq -r .tenantId azure.json)
            SUBSCRIPTION_ID=$(jq -r .subscriptionId azure.json)

            az login --service-principal --username "$CLIENT_ID" --password "$CLIENT_SECRET" --tenant "$TENANT_ID" >/dev/null
            az account set --subscription "$SUBSCRIPTION_ID"
            az aks get-credentials -g rg-petclinic -n aks-petclinic --overwrite-existing
            rm -f azure.json
            kubectl version --client
          """
        }
      }
    }

    stage('Create Namespace') {
      steps {
        sh 'kubectl apply -f k8s/namespace.yaml'
      }
    }

    stage('Render & Apply Manifests') {
      steps {
        sh """
          sed "s|<ACR_LOGIN_SERVER>|petclinicacr9999.azurecr.io|g; s|<TAG>|${params.IMAGE_TAG}|g"             k8s/deployment.yaml > k8s/deployment.rendered.yaml
          kubectl apply -f k8s/deployment.rendered.yaml
          kubectl apply -f k8s/service.yaml
        """
      }
    }

    stage('Rollout Status') {
      steps {
        sh "kubectl -n petclinic rollout status deploy/petclinic --timeout=180s"
      }
    }

    stage('Show Service') {
      steps {
        sh "kubectl get svc -n petclinic -o wide"
      }
    }
  }

  post {
    success { echo "CD success: Deployed petclinicacr9999.azurecr.io/petclinic:${params.IMAGE_TAG}" }
    failure {
      echo 'CD failed â€” diagnostics:'
      sh "kubectl get pods -n petclinic; true"
      sh "kubectl describe deploy/petclinic -n petclinic; true"
      sh "kubectl get events -n petclinic --sort-by=.lastTimestamp | tail -n 50; true"
    }
  }
}
