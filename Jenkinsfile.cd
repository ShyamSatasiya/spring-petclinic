pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    timestamps()
  }

  environment {
    RG               = 'rg-petclinic'
    AKS              = 'aks-petclinic'
    ACR_NAME         = 'petclinicacr9999'
    ACR_LOGIN_SERVER = 'petclinicacr9999.azurecr.io'
    IMAGE_NAME       = 'petclinic'
    NAMESPACE        = 'petclinic'
  }

  parameters {
    string(name: 'IMAGE_TAG', defaultValue: '28-04b3cc9', description: 'Image tag to deploy (from CI output).')
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Azure Login & KubeConfig') {
      steps {
        withCredentials([string(credentialsId: 'azure-sp-jenkins', variable: 'AZURE_CREDENTIALS_JSON')]) {
          powershell '''
            Set-StrictMode -Version Latest
            $c = $env:AZURE_CREDENTIALS_JSON | ConvertFrom-Json
            az login --service-principal --username $c.clientId --password $c.clientSecret --tenant $c.tenantId | Out-Null
            az account set --subscription $c.subscriptionId
            az aks get-credentials -g $env:RG -n $env:AKS --overwrite-existing
            kubectl version --client
          '''
        }
      }
    }

    stage('Create Namespace') {
      steps {
        bat 'kubectl apply -f k8s\\namespace.yaml'
      }
    }

    stage('Render & Apply Manifests') {
      steps {
        // Render deployment.rendered.yaml by replacing placeholders with real values (Windows-safe)
        powershell """
          (Get-Content 'k8s/deployment.yaml') `
            -replace '<ACR_LOGIN_SERVER>','${env.ACR_LOGIN_SERVER}' `
            -replace '<TAG>','${params.IMAGE_TAG}' `
            | Set-Content 'k8s/deployment.rendered.yaml'
        """
        bat '''
          kubectl apply -f k8s\\deployment.rendered.yaml
          kubectl apply -f k8s\\service.yaml
        '''
      }
    }

    stage('Rollout Status') {
      steps {
        bat "kubectl -n %NAMESPACE% rollout status deploy/%IMAGE_NAME% --timeout=180s"
      }
    }

    stage('Show Service') {
      steps {
        bat "kubectl get svc -n %NAMESPACE% -o wide"
      }
    }
  }

  post {
    success {
      echo "CD success: Deployed ${env.ACR_LOGIN_SERVER}/${env.IMAGE_NAME}:${params.IMAGE_TAG}"
    }
    failure {
      echo 'CD failed â€” diagnostics:'
      bat "kubectl get pods -n %NAMESPACE% || ver"
      bat "kubectl describe deploy/%IMAGE_NAME% -n %NAMESPACE% || ver"
      bat "kubectl get events -n %NAMESPACE% --sort-by=.lastTimestamp | tail -n 50 || ver"
    }
  }
}
