pipeline {
  agent any

  options {
    skipDefaultCheckout(true)
    timestamps()
   
  }

  tools {
    jdk 'jdk17'        // Manage Jenkins -> Global Tool Configuration
    maven 'maven3'
  }

  environment {
    ACR_NAME        = 'petclinicacr9999'
    ACR_LOGIN_SERVER= 'petclinicacr9999.azurecr.io'
    IMAGE_NAME      = 'petclinic'
    SONARQUBE_SERVER= 'sonarqube'
    SONAR_PROJECT_KEY = 'petclinic'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

   stage('Build & Test') {
  steps {
    script {
      // Resolve the configured JDK tool path on this agent
      def JDK = tool name: 'jdk17', type: 'hudson.model.JDK'
      // Add JAVA_HOME and its bin to PATH for this step
      withEnv(["JAVA_HOME=${JDK}", "PATH+JAVA=${JDK}\\bin"]) {
        bat '''
          echo Using JAVA_HOME=%JAVA_HOME%
          java -version
          call .\\mvnw -version
          call .\\mvnw -B -ntp -DskipTests=false clean test
        '''
      }
    }
  }
  post {
    always {
      // Allow empty while weâ€™re wiring things up
      junit testResults: 'target/surefire-reports/*.xml', allowEmptyResults: true
      bat 'if exist target\\surefire-reports (dir target\\surefire-reports) else (echo No surefire reports found)'
    }
  }
}


stage('SonarQube Analysis') {
    steps {
        withSonarQubeEnv('sonarqube') {
            bat '''
                call .\\mvnw -B -ntp sonar:sonar ^
                  -Dsonar.projectKey=spring-petclinic ^
                  -Dsonar.host.url=%SONAR_HOST_URL% ^
                  -Dsonar.token=%SONAR_AUTH_TOKEN%
            '''
        }
    }
}


    stage('Quality Gate') {
      steps {
        timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Package JAR') {
      steps {
        bat 'mvn -B -DskipTests package'
        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
      }
    }
stage('Compute Image Tag') {
  steps {
    script {
      def shortSha = bat(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
      env.IMAGE_TAG = "${env.BUILD_NUMBER}-${shortSha}"
      env.IMAGE_REF = "${env.ACR_LOGIN_SERVER}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"
      echo "IMAGE_REF = ${env.IMAGE_REF}"
    }
  }
}
stage('Docker Build') {
  steps {
    bat """
      echo Building %IMAGE_REF%
      docker build -t %IMAGE_REF% .
      docker images %IMAGE_REF%
    """
  }
}
}




 stage('Trivy Scan (Docker)') {
  steps {
    bat """
      echo Scanning %IMAGE_REF%
      docker run --rm ^
        -v //./pipe/docker_engine:/var/run/docker.sock ^
        aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL %IMAGE_REF%
    """
  }
}

    stage('Login to ACR & Push') {
  steps {
    withCredentials([string(credentialsId: 'azure-sp-jenkins', variable: 'AZURE_JSON')]) {
      powershell """
        Set-Content -Path azure.json -Value \$env:AZURE_JSON
        \$creds = Get-Content azure.json | ConvertFrom-Json
        az login --service-principal --username \$creds.clientId --password \$creds.clientSecret --tenant \$creds.tenantId | Out-Null
        az account set --subscription \$creds.subscriptionId
        az acr login -n ${env.ACR_NAME}
      """
      bat "docker push %IMAGE_REF%"
      powershell 'Remove-Item azure.json -Force'
    }
  }
}


  }

  post {
    success {
      echo "CI success: ${env.IMAGE_REF}"
      // Example: trigger CD job automatically
      // build job: 'petclinic-cd', parameters: [string(name:'IMAGE_TAG', value: env.IMAGE_TAG)]
    }
    failure { echo 'CI failed.' }
  }

